kind: ConfigMap
apiVersion: v1
metadata:
  name: coil-config
  namespace: kube-system
data:
  # The CNI network configuration to install on each node.
  cni_netconf: |-
    {
        "cniVersion": "0.3.1",
        "name": "k8s-pod-network",
        "plugins": [
          {
            "type": "coil",
            "coild": "http://127.0.0.1:9383"
          },
          {
            "type": "tuning",
            "mtu": 1400
          },
          {
            "type": "portmap",
            "snat": true,
            "capabilities": {"portMappings": true}
          }
        ]
    }

  # CNI network configuration may be given by a file.
  #cni_netconf_file: "/path/to/10-coil.conf"

  # Installation directory for CNI configuration file.
  # Default: "/etc/cni/net.d"
  #cni_etc_dir: "/etc/cni/net.d"

  # Installation directory for CNI plugin.
  # Default: "/opt/cni/bin"
  #cni_bin_dir: "/opt/cni/bin"

  # Path to `coil`
  # Default: "/coil`
  #coil_path: "/coil"

---

# This manifest installs the coild as well as CNI plugins and
# network config on each node.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: coil-node
  namespace: kube-system
  labels:
    k8s-app: coil-node
spec:
  selector:
    matchLabels:
      k8s-app: coil-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: coil-node
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: coil-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: coild
          image: quay.io/cybozu/coil:dev
          command:
            - /coild
            - "-etcd-endpoints=https://10.0.0.101:2379"
            - "-etcd-tls-ca=/coil-secrets/cacert"
            - "-etcd-tls-cert=/coil-secrets/cert"
            - "-etcd-tls-key=/coil-secrets/key"
          env:
            # Set noderef for node controller.
            - name: COIL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /status
              port: 9383
              host: localhost
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          volumeMounts:
            - mountPath: /coil-secrets
              name: etcd-certs
        # This container installs the coil CNI plugin and configuration file.
        - name: coil-installer
          image: quay.io/cybozu/coil:dev
          command: ["/coil-installer"]
          env:
            - name: CNI_NETCONF
              valueFrom:
                configMapKeyRef:
                  name: coil-config
                  key: cni_netconf
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
      volumes:
        # Used by installer.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used by coild
        - name: etcd-certs
          secret:
            secretName: coil-etcd-secrets
            defaultMode: 0400
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coil-node
  namespace: kube-system

---

# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
# apiVersion: extensions/v1beta1
# kind: Deployment
# metadata:
#   name: coil-controllers
#   namespace: kube-system
#   labels:
#     k8s-app: coil-controllers
#   annotations:
#     scheduler.alpha.kubernetes.io/critical-pod: ''
# spec:
#   # The controllers can only have a single active instance.
#   replicas: 1
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       name: calico-kube-controllers
#       namespace: kube-system
#       labels:
#         k8s-app: calico-kube-controllers
#     spec:
#       nodeSelector:
#         beta.kubernetes.io/os: linux
#       # The controllers must run in the host network namespace so that
#       # it isn't governed by policy that would prevent it from working.
#       hostNetwork: true
#       tolerations:
#         # Mark the pod as a critical add-on for rescheduling.
#         - key: CriticalAddonsOnly
#           operator: Exists
#         - key: node-role.kubernetes.io/master
#           effect: NoSchedule
#       serviceAccountName: calico-kube-controllers
#       containers:
#         - name: calico-kube-controllers
#           image: quay.io/calico/kube-controllers:v3.2.3
#           env:
#             # The location of the Calico etcd cluster.
#             - name: ETCD_ENDPOINTS
#               valueFrom:
#                 configMapKeyRef:
#                   name: calico-config
#                   key: etcd_endpoints
#             # Location of the CA certificate for etcd.
#             - name: ETCD_CA_CERT_FILE
#               valueFrom:
#                 configMapKeyRef:
#                   name: calico-config
#                   key: etcd_ca
#             # Location of the client key for etcd.
#             - name: ETCD_KEY_FILE
#               valueFrom:
#                 configMapKeyRef:
#                   name: calico-config
#                   key: etcd_key
#             # Location of the client certificate for etcd.
#             - name: ETCD_CERT_FILE
#               valueFrom:
#                 configMapKeyRef:
#                   name: calico-config
#                   key: etcd_cert
#             # Choose which controllers to run.
#             - name: ENABLED_CONTROLLERS
#               value: policy,profile,workloadendpoint,node
#           volumeMounts:
#             # Mount in the etcd TLS secrets.
#             - mountPath: /calico-secrets
#               name: etcd-certs
#           readinessProbe:
#             exec:
#               command:
#               - /usr/bin/check-status
#               - -r
#       volumes:
#         # Mount in the etcd TLS secrets with mode 400.
#         # See https://kubernetes.io/docs/concepts/configuration/secret/
#         - name: etcd-certs
#           secret:
#             secretName: calico-etcd-secrets
#             defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coil-controller
  namespace: kube-system
